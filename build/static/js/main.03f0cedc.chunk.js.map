{"version":3,"sources":["components/beers.js","components/beer.js","App.js","serviceWorker.js","index.js"],"names":["Beers","props","names","react_default","a","createElement","class","map","name","className","likes","onClick","updateLikes","id","updateDislikes","Beer","state","new","handleInputChange","event","value","target","_this","setState","Object","defineProperty","handleFormSubmit","preventDefault","data","axios","post","concat","then","res","get","result","newData","catch","error","alert","put","console","log","_this2","this","onChange","type","placeholder","beers","Component","App","beer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAsBeA,EApBD,SAACC,GAAU,IACfC,EAAUD,EAAVC,MACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACRJ,EAAMK,IAAI,SAAAC,GAAI,OACbL,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,0CACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,cAAcE,EAAKA,MAC7BL,EAAAC,EAAAC,cAAA,KAAGI,UAAU,+BAAb,UAAmDD,EAAKE,OACxDP,EAAAC,EAAAC,cAAA,UAAQI,UAAU,uBAAuBE,QAAS,kBAAMV,EAAMW,YAAYJ,EAAKK,MAA/E,QACAV,EAAAC,EAAAC,cAAA,UAAQI,UAAU,iBAAiBE,QAAS,kBAAMV,EAAMa,eAAeN,EAAKK,MAA5E,kBCkHCE,6MAxHXC,MAAQ,CACJd,MAAO,GACPe,IAAK,MAeTC,kBAAoB,SAAAC,GAEhB,IAAIC,EAAQD,EAAME,OAAOD,MACnBZ,EAAOW,EAAME,OAAOb,KAE1Bc,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKhB,EAAOY,OAIhBM,iBAAmB,SAAAP,GACfA,EAAMQ,iBAEN,IAGMC,EAAO,CACTpB,KAJSc,EAAKN,MAAMC,IAKpBP,MAJU,GAOdmB,IAAMC,KAAQ,uCAAdC,OAAA,wCAA4FH,GACvFI,KAAK,SAAAC,GAAG,OAAIJ,IAAMK,IAAO,uCAAbH,OAAA,yCACRC,KAAK,SAAAC,GAAG,OAAIA,EAAIL,KAAKrB,IAAI,SAAA4B,GAAM,MAC5B,CACI3B,KAAM2B,EAAO3B,KACbK,GAAIsB,EAAOtB,GACXH,MAAOyB,EAAOzB,WAErBsB,KAAK,SAAAI,GAAO,OAAId,EAAKC,SAAS,CAAErB,MAAOkC,MACvCC,MAAM,SAAAC,GAAK,OAAIC,MAAMD,OAE9BhB,EAAKC,SAAS,CACVN,IAAK,QAMbL,YAAc,SAAAC,GAEVgB,IAAMK,IAAO,uCAAHH,OAAA,yCAAmFlB,GACxFmB,KAAK,SAAAC,GAAG,OAAIJ,IAAMW,IAAO,uCAAHT,OAAA,yCAAmFlB,EAAI,CAAEH,MAAOuB,EAAIL,KAAK,GAAGlB,MAAQ,IACtIsB,KAAK,SAAAC,GAAG,OAAIQ,QAAQC,IAAI,eAC5BV,KAAK,SAAAC,GAAG,OAAIJ,IAAMK,IAAO,uCAAbH,OAAA,yCACRC,KAAK,SAAAC,GAAG,OAAIA,EAAIL,KAAKrB,IAAI,SAAA4B,GAAM,MAC5B,CACI3B,KAAM2B,EAAO3B,KACbK,GAAIsB,EAAOtB,GACXH,MAAOyB,EAAOzB,WAErBsB,KAAK,SAAAI,GAAO,OAAId,EAAKC,SAAS,CAAErB,MAAOkC,MACvCC,MAAM,SAAAC,GAAK,OAAIC,MAAMD,UAIlCxB,eAAiB,SAAAD,GAEbgB,IAAMK,IAAO,uCAAHH,OAAA,yCAAmFlB,GACxFmB,KAAK,SAAAC,GAAG,OAAIJ,IAAMW,IAAO,uCAAHT,OAAA,yCAAmFlB,EAAI,CAAEH,MAAOuB,EAAIL,KAAK,GAAGlB,MAAQ,IACtIsB,KAAK,SAAAC,GAAG,OAAIQ,QAAQC,IAAI,eAC5BV,KAAK,SAAAC,GAAG,OAAIJ,IAAMK,IAAO,uCAAbH,OAAA,yCACRC,KAAK,SAAAC,GAAG,OAAIA,EAAIL,KAAKrB,IAAI,SAAA4B,GAAM,MAC5B,CACI3B,KAAM2B,EAAO3B,KACbK,GAAIsB,EAAOtB,GACXH,MAAOyB,EAAOzB,WAErBsB,KAAK,SAAAI,GAAO,OAAId,EAAKC,SAAS,CAAErB,MAAOkC,MACvCC,MAAM,SAAAC,GAAK,OAAIC,MAAMD,2FAjFd,IAAAK,EAAAC,KAChBf,IAAMK,IAAO,uCAAbH,OAAA,yCACKC,KAAK,SAAAC,GAAG,OAAIA,EAAIL,KAAKrB,IAAI,SAAA4B,GAAM,MAC5B,CACI3B,KAAM2B,EAAO3B,KACbK,GAAIsB,EAAOtB,GACXH,MAAOyB,EAAOzB,WAErBsB,KAAK,SAAAI,GAAO,OAAIO,EAAKpB,SAAS,CAAErB,MAAOkC,MACvCC,MAAM,SAAAC,GAAK,OAAIC,MAAMD,sCA8E1B,OACInC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAII,UAAU,eAAd,aACIN,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACXN,EAAAC,EAAAC,cAAA,SACIe,MAAOwB,KAAK5B,MAAMC,IAClBT,KAAK,MACLqC,SAAUD,KAAK1B,kBACf4B,KAAK,OACLC,YAAY,eACZtC,UAAU,uCAGdN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,6CAA6CE,QAASiC,KAAKlB,kBAA7E,aAIJvB,EAAAC,EAAAC,cAAC2C,EAAD,CACI9C,MAAO0C,KAAK5B,MAAMd,MAClBU,YAAagC,KAAKhC,YAClBE,eAAgB8B,KAAK9B,yBAnHtBmC,aCCJC,EAFH,kBAAM/C,EAAAC,EAAAC,cAAC8C,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.03f0cedc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Beers = (props) => {\r\n  const { names } = props\r\n  return (\r\n    <div class=\"row\">\r\n      {names.map(name =>\r\n        <div class=\"col-md-4\">\r\n          <div class=\"card mb-2 mt-2 shadow bg-white rounded\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{name.name}</h5>\r\n              <p className=\"text-muted font-weight-bold\">Likes: {name.likes}</p>\r\n              <button className=\"btn btn-primary mr-3\" onClick={() => props.updateLikes(name.id)}>Like</button>\r\n              <button className=\"btn btn-danger\" onClick={() => props.updateDislikes(name.id)}>Dislike</button>\r\n            </div>\r\n          </div>\r\n        </div>)}\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Beers;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Beers from \"./beers\"\r\n\r\n\r\nclass Beer extends Component {\r\n\r\n    state = {\r\n        names: [],\r\n        new: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer`)\r\n            .then(res => res.data.map(result => (\r\n                {\r\n                    name: result.name,\r\n                    id: result.id,\r\n                    likes: result.likes\r\n                })))\r\n            .then(newData => this.setState({ names: newData }))\r\n            .catch(error => alert(error))\r\n    }\r\n\r\n    handleInputChange = event => {\r\n\r\n        let value = event.target.value;\r\n        const name = event.target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const name = this.state.new\r\n        const likes = 0\r\n\r\n        const data = {\r\n            name,\r\n            likes\r\n        }\r\n\r\n        axios.post(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer`, data)\r\n            .then(res => axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer`)\r\n                .then(res => res.data.map(result => (\r\n                    {\r\n                        name: result.name,\r\n                        id: result.id,\r\n                        likes: result.likes\r\n                    })))\r\n                .then(newData => this.setState({ names: newData }))\r\n                .catch(error => alert(error)))\r\n\r\n        this.setState({\r\n            new: \"\"\r\n        })\r\n\r\n\r\n    }\r\n\r\n    updateLikes = id => {\r\n\r\n        axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer/` + id)\r\n            .then(res => axios.put(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer/` + id, { likes: res.data[0].likes + 1 })\r\n                .then(res => console.log(\"updated\")))\r\n            .then(res => axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer`)\r\n                .then(res => res.data.map(result => (\r\n                    {\r\n                        name: result.name,\r\n                        id: result.id,\r\n                        likes: result.likes\r\n                    })))\r\n                .then(newData => this.setState({ names: newData }))\r\n                .catch(error => alert(error)))\r\n\r\n    }\r\n\r\n    updateDislikes = id => {\r\n\r\n        axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer/` + id)\r\n            .then(res => axios.put(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer/` + id, { likes: res.data[0].likes - 1 })\r\n                .then(res => console.log(\"updated\")))\r\n            .then(res => axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://beer.fluentcloud.com/v1/beer`)\r\n                .then(res => res.data.map(result => (\r\n                    {\r\n                        name: result.name,\r\n                        id: result.id,\r\n                        likes: result.likes\r\n                    })))\r\n                .then(newData => this.setState({ names: newData }))\r\n                .catch(error => alert(error)))\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h1 className=\"text-center\">My Cooler</h1>\r\n                <form>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        value={this.state.new}\r\n                        name=\"new\"\r\n                        onChange={this.handleInputChange}\r\n                        type=\"text\"\r\n                        placeholder=\"Add New Beer\"\r\n                        className=\"form-control form-control-lg mt-5\"\r\n                    />\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-lg btn-block mb-3 mt-2\" onClick={this.handleFormSubmit}>Add Beer</button>\r\n                    \r\n                </form>\r\n\r\n                <Beers\r\n                    names={this.state.names}\r\n                    updateLikes={this.updateLikes}\r\n                    updateDislikes={this.updateDislikes}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Beer;","import React, { Component } from 'react';\nimport Beer from \"./components/beer\";\n\n\nconst App = () => <Beer/>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}